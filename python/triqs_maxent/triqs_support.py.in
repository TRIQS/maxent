# TRIQS application maxent
# Copyright (C) 2018 Gernot J. Kraberger
# Copyright (C) 2018 Simons Foundation
# Authors: Gernot J. Kraberger and Manuel Zingl
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.



import sys
from functools import update_wrapper
try:
    from decorator import decorate
except ImportError:
    # for old versions of the decorator library
    from decorator import decorator
    decorate = lambda a, b: decorator(b, a)
import hashlib


def if_triqs_2():
    return "@TRIQS_V2@" == "ON"


def if_triqs_1():
    return "@TRIQS_V1@" == "ON"


def if_no_triqs():
    return "@USE_TRIQS@" == "OFF"


def _require_triqs(func, *args, **kwargs):
    if if_no_triqs():
        raise NotImplementedError(
            "The functionality provided by {} is only available with TRIQS.".format(
                func.__name__))
    return func(*args, **kwargs)


def require_triqs(func):
    if if_no_triqs():
        try:
            common = 0
            dsp = func.__doc__.split('\n')
            if len(dsp) > 1:
                common = 1000
                for s in func.__doc__.split('\n')[1:]:
                    l = len(s)
                    l2 = len(s.lstrip())
                    if l == 0:
                        continue
                    if l - l2 < common:
                        common = l - l2
            common_sp = ' ' * common
            func.__doc__ = (common_sp +
                            ".. warning::\n\n" +
                            common_sp +
                            "    This requires TRIQS support!\n\n" +
                            ' ' * (common - len(func.__doc__) +
                                   len(func.__doc__.lstrip())) +
                            func.__doc__)
        except:
            pass

    new_func = decorate(func, _require_triqs)
    update_wrapper(new_func, func)
    return new_func

def assert_text_files_equal(fname1, fname2):

    def md5(fname):
        hash_md5 = hashlib.md5()
        with open(fname, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()

    md5_1 = md5(fname1)
    md5_2 = md5(fname2)
    assert md5_1 == md5_2, "files {} and {} differ".format(fname1, fname2)
